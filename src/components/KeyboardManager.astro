---
import SelectAction from '@/components/SelectAction.astro'

import ArrowDown from '@/icons/ArrowDown.astro'
import ArrowUp from '@/icons/ArrowUp.astro'
import CornerDownLeft from '@/icons/CornerDownLeft.astro'
import GitHub from '@/icons/GitHub.astro'
import LinkedIn from '@/icons/LinkedIn.astro'
import Printer from '@/icons/Printer.astro'
import World from '@/icons/World.astro'
import X from '@/icons/X.astro'

import type { SocialIcon } from '@/types'

import { basics } from '@/cv'
const { profiles, url } = basics

const SOCIAL_ICONS: SocialIcon = {
	LinkedIn,
	GitHub,
	X,
	World
}
---

<dialog class="modal no-print">
  <article>
    <label for="search">
      <input
        id="search"
        class="search"
        type="text"
        placeholder="Buscar comando"
      />
    </label>
    <main>
      <section>
        <span>acciones</span>
        <SelectAction
          className="select-item"
          action="Imprimir"
          hotkey="p"
          selected
          letterClass="print-letter"
        >
          <Printer slot="icon" width="18" height="18" />
        </SelectAction>
      </section>
      <section>
        <span>Enlaces</span>
        {
          profiles.map(({ network, url }) => {
            const Icon = SOCIAL_ICONS[network];
            const firstLetter = network[0].toUpperCase();
            return (
              <SelectAction
                className="select-item"
                action={network}
                hotkey={firstLetter}
                url={url}
                letterClass="hotkey-letter"
              >
                <Icon slot="icon" width="18" height="18" />
              </SelectAction>
            );
          })
        }
        {
          url && (
            <SelectAction
              className="select-item"
              action="Mi sitio web"
              hotkey="y"
              url={url}
              letterClass="hotkey-letter"
            >
              <World slot="icon" width="18" height="18" />
            </SelectAction>
          )
        }
      </section>
    </main>
    <footer>
      <span>
        <CornerDownLeft className="key-icon" width="18" height="18" />
        seleccionar
      </span>
      <span>
        <ArrowDown className="key-icon" width="18" height="18" />
        <ArrowUp className="key-icon" width="18" height="18" />
        navegar
      </span>
      <span><span class="esc">esc</span>cerrar</span>
    </footer>
  </article>
</dialog>

<style>
  dialog {
    width: 100%;
    height: 100%;
    padding: 0;
    background-color: transparent;
    border: none;

    article {
      position: relative;
      max-width: 595px;
      margin: auto;
      top: 20%;
      background-color: #fff;
      border-radius: 8px;
      filter: drop-shadow(0 25px 25px rgb(0 0 0 / 0.15));

      label {
        input {
          width: 100%;
          border-top-left-radius: 8px;
          border-top-right-radius: 8px;
          border-top: none;
          border-inline: none;
          border-bottom: 1px solid #e4e5e9;
          padding: 16px;
          font-family: "Monaspace Argon";
          font-size: 16px;
          font-weight: 700;
          outline: none;
          color: #a7aab9;
        }

        input::placeholder {
          color: #a7aab9;
        }
      }

      main {
        padding: 16px 0;

        section {
          span {
            color: #a7aab9;
            font-size: 12px;
            font-family: "Monaspace Argon";
            padding-left: 16px;
          }
        }
      }

      footer {
        border-top: 1px solid rgb(239, 241, 244);
        padding: 8px 16px;
        font-size: 12px;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        gap: 12px;
        align-items: center;

        span {
          display: flex;
          align-items: center;
          gap: 4px;
          color: #6b6f76;
          font-weight: 400;
        }
      }
    }
  }

  dialog::backdrop {
    background: rgba(167, 170, 185, 0.5);
  }

  .esc {
    background-color: rgb(239, 241, 244);
    padding: 3px 4px;
    border-radius: 4px;
    font-weight: 500;
  }

  @media (min-width: 390px) {
    footer {
      flex-wrap: nowrap;
    }
  }
</style>

<style is:global>
  [aria-selected="true"] {
    border-left: 2px solid rgb(110, 94, 210) !important;
    background-color: rgb(248, 249, 251);
    transition: background-color 0.15s ease-in;
  }

  .key-icon {
    background-color: rgb(239, 241, 244);
    border-radius: 4px;
    color: #6b6f76;
    stroke-width: 2;
    padding: 2px;
  }

  .filter {
    visibility: hidden;
    position: fixed;
    opacity: 0;
    height: 0;
  }
</style>

<script>
  const d = document;
  const dialog = d.querySelector(".modal") as HTMLDialogElement;
  const links = d.querySelectorAll(".select-item");
  const hotkeyLetters = d.querySelectorAll(".hotkey-letter");
  const printLetter = d.querySelector(".print-letter") as HTMLElement;
  const noPrint = d.querySelector(".no-print");

  dialog.addEventListener("click", (e) => {
    const target = e.target;
    if (target === dialog) dialog.close();
  });

  d.addEventListener("keydown", (e) => {
    const key = e.key.toLowerCase();
    const ctrlKey = e.ctrlKey;

    if (ctrlKey && key === "k") {
      e.preventDefault();
      dialog.showModal();
    }

    if (e.key === "Escape") dialog.close();
  });

  // Search
  d.addEventListener("keyup", (e) => {
    const target = e.target as HTMLInputElement;
    if (target.matches(".search")) {
      d.querySelectorAll(".select-item").forEach((item) => {
        const itemText = item.innerHTML.toLowerCase();
        const targetValue = target.value.toLowerCase();

        itemText.includes(targetValue)
          ? item.classList.remove("filter")
          : item.classList.add("filter");
      });
    }
  });

  // Navigation
  let selectIndex = 0;
  function selectItem(index: number) {
    links.forEach((link) => {
      link.setAttribute("aria-selected", "false");
    });

    selectIndex = index;
    links[index].setAttribute("aria-selected", "true");
  }

  d.addEventListener("keydown", (e) => {
    const subtract = links.length - 1;
    const key = e.key;
    const enterKey = e.key === "Enter";

    if (key === "ArrowDown") {
      e.preventDefault();
      const operator = selectIndex === subtract ? 0 : ++selectIndex;
      selectItem((selectIndex = operator));
    }

    if (key === "ArrowUp") {
      e.preventDefault();
      const operator = selectIndex === 0 ? subtract : --selectIndex;
      selectItem((selectIndex = operator));
    }

    if (selectIndex !== 0 && enterKey) {
      const href = links[selectIndex].getAttribute("href");
      window.open(href as string);
    }

    if (selectIndex === 0 && enterKey) {
      if (noPrint) window.print();
    }
  });

  links[0].addEventListener("click", () => {
    if (noPrint) window.print();
  });

  links.forEach((link, index) => {
    link.addEventListener("mouseover", () => {
      selectItem(index);
    });
  });

  // Open with keyboard shortcut
  let letters: any = {};
  hotkeyLetters.forEach((item) => {
    const letter = item.innerHTML.trim().toLowerCase();
    const link = item.closest("a");
    letters[letter] = link;
  });

  d.addEventListener("keydown", (e) => {
    const key = e.key.toLowerCase();
    const ctrlKey = e.ctrlKey;

    if (ctrlKey && letters[key]) {
      e.preventDefault();
      const href = letters[key].getAttribute("href");
      window.open(href);
    }
  });

  const letter = printLetter.innerHTML.trim().toLowerCase();
  d.addEventListener("keydown", (e) => {
    const key = e.key.toLowerCase();
    const ctrlKey = e.ctrlKey;
    if (ctrlKey && key === letter) {
      e.preventDefault();
      window.print();
    }
  });
</script>
